}
relex_majvote <- get_metrics(relex$majvote, relex$test_partition)
relex_single  <- get_metrics(relex$single, relex$test_partition)
relex_expert  <- get_metrics(relex$expert, relex$test_partition)
relex_crowd <- data.frame(stringsAsFactors = F)
relex_spam <- data.frame(stringsAsFactors = F)
for (r in 1:9) {
ratio <- r / 10
sc <- get_metrics((relex$sentence_relation_score >= ratio) * 2 - 1,
relex$test_partition)
relex_crowd <- rbind(relex_crowd, sc)
sp <- get_metrics((relex$spam >= ratio) * 2 - 1,
relex$test_partition)
relex_spam <- rbind(relex_spam, sp)
}
relex_spam
precision <- function(tp, fp, tn, fn) {
return(tp / (tp + fp))
}
recall <- function(tp, fp, tn, fn) {
return(tp / (tp + fn))
}
f1score <- function(tp, fp, tn, fn) {
return(2 * tp / (2 * tp + fp + fn))
}
accuracy <- function(tp, fp, tn, fn) {
return((tp + tn) / (tp + fp + tn + fn))
}
get_metrics <- function(data, gold) {
tp <- 0
tn <- 0
fp <- 0
fn <- 0
for (idx in 1:length(data)) {
if (data[idx] == 1  && gold[idx] == 1 ) tp <- tp + 1
if (data[idx] == 1  && gold[idx] == -1) fp <- fp + 1
if (data[idx] == -1 && gold[idx] == 1 ) fn <- fn + 1
if (data[idx] == -1 && gold[idx] == -1) tn <- tn + 1
}
p <- precision(tp, fp, tn, fn)
r <- recall(tp, fp, tn, fn)
f1 <- f1score(tp, fp, tn, fn)
acc <- accuracy(tp, fp, tn, fn)
metrics <- data.frame(
tp = tp,
tn = tn,
fp = fp,
fn = fn,
p = p,
r = r,
f1 = f1,
acc = acc,
stringsAsFactors = F
)
return(metrics)
}
recompute_metrics <- function(data) {
data$p   <- precision(data$tp, data$fp, data$tn, data$fn)
data$r   <- recall(data$tp, data$fp, data$tn, data$fn)
data$f1  <- f1score(data$tp, data$fp, data$tn, data$fn)
data$acc <- accuracy(data$tp, data$fp, data$tn, data$fn)
return(data)
}
contingency_table <- function(data1, data2, gold) {
ct <- rep(0, 4)
for (idx in 1:length(data1)) {
if      (data1[idx] == gold[idx]  && data2[idx] == gold[idx]) ct[1] <- ct[1] + 1
else if (data1[idx] == gold[idx] && data2[idx] != gold[idx]) ct[2] <- ct[2] + 1
else if (data1[idx] != gold[idx] && data2[idx] == gold[idx]) ct[3] <- ct[3] + 1
else ct[4] <- ct[4] + 1
}
return(matrix(ct, nrow = 2))
}
#### medical relex data ####
relex <- read.csv("../input/majvote/all_data_mv.csv", stringsAsFactors = F)
raw_spam <- read.csv("../input/majvote/medical_raw_data_spam.csv", stringsAsFactors = F)
raw_spam <- raw_spam[raw_spam$Sent_id %in% relex$Sent_id, ]
relex$spam <- -1
for (idx in 1:length(relex[, 1])) {
rel <- relex$relation[idx]
rel <- paste(rel, "s", sep = "")
aux <- raw_spam[raw_spam$Sent_id %in% c(relex$Sent_id[idx]), ]
if (length(aux) > 0) {
relex$spam[idx] <- min(aux[, rel])
} else {
print(aux)
}
}
relex_majvote <- get_metrics(relex$majvote, relex$test_partition)
relex_single  <- get_metrics(relex$single, relex$test_partition)
relex_expert  <- get_metrics(relex$expert, relex$test_partition)
relex_crowd <- data.frame(stringsAsFactors = F)
relex_spam <- data.frame(stringsAsFactors = F)
for (r in 1:9) {
ratio <- r / 10
sc <- get_metrics((relex$sentence_relation_score >= ratio) * 2 - 1,
relex$test_partition)
relex_crowd <- rbind(relex_crowd, sc)
sp <- get_metrics((relex$spam >= ratio) * 2 - 1,
relex$test_partition)
relex_spam <- rbind(relex_spam, sp)
}
precision <- function(tp, fp, tn, fn) {
return(tp / (tp + fp))
}
recall <- function(tp, fp, tn, fn) {
return(tp / (tp + fn))
}
f1score <- function(tp, fp, tn, fn) {
return(2 * tp / (2 * tp + fp + fn))
}
accuracy <- function(tp, fp, tn, fn) {
return((tp + tn) / (tp + fp + tn + fn))
}
get_metrics <- function(data, gold) {
tp <- 0
tn <- 0
fp <- 0
fn <- 0
for (idx in 1:length(data)) {
if (data[idx] == 1  && gold[idx] == 1 ) tp <- tp + 1
if (data[idx] == 1  && gold[idx] == -1) fp <- fp + 1
if (data[idx] == -1 && gold[idx] == 1 ) fn <- fn + 1
if (data[idx] == -1 && gold[idx] == -1) tn <- tn + 1
}
p <- precision(tp, fp, tn, fn)
r <- recall(tp, fp, tn, fn)
f1 <- f1score(tp, fp, tn, fn)
acc <- accuracy(tp, fp, tn, fn)
metrics <- data.frame(
tp = tp,
tn = tn,
fp = fp,
fn = fn,
p = p,
r = r,
f1 = f1,
acc = acc,
stringsAsFactors = F
)
return(metrics)
}
recompute_metrics <- function(data) {
data$p   <- precision(data$tp, data$fp, data$tn, data$fn)
data$r   <- recall(data$tp, data$fp, data$tn, data$fn)
data$f1  <- f1score(data$tp, data$fp, data$tn, data$fn)
data$acc <- accuracy(data$tp, data$fp, data$tn, data$fn)
return(data)
}
contingency_table <- function(data1, data2, gold) {
ct <- rep(0, 4)
for (idx in 1:length(data1)) {
if      (data1[idx] == gold[idx]  && data2[idx] == gold[idx]) ct[1] <- ct[1] + 1
else if (data1[idx] == gold[idx] && data2[idx] != gold[idx]) ct[2] <- ct[2] + 1
else if (data1[idx] != gold[idx] && data2[idx] == gold[idx]) ct[3] <- ct[3] + 1
else ct[4] <- ct[4] + 1
}
return(matrix(ct, nrow = 2))
}
events <- c(
"Islands_disputed_between_China_and_Japan",
"Korean_MV_Sewol_ferry_sinking",
"Japan_whaling_and_dolphin_hunting",
"Davos_world_economic_forum_2014",
"Disappearance_of_Malaysia_Airlines_Flight_370",
"anti_China_protests_in_Vietnam",
"Ukraine_crisis_2014",
"FIFA_worldcup_2014",
"NONE"
)
tweet_single <- read.csv("../input/majvote/tweet_single.csv", stringsAsFactors = F)
tweet_single <- tweet_single[!duplicated(tweet_single$Unit.Id), ]
tweet_majvote <- read.csv("../input/majvote/tweet_mv.csv", stringsAsFactors = F)
tweet_ground_truth <- read.csv("../input/majvote/tweet_ground_truth.csv", stringsAsFactors = F)
tweet_single <- tweet_single[order(tweet_single$Unit.Id), ]
tweet_ground_truth <- tweet_ground_truth[order(tweet_ground_truth$Unit.Id),]
tweet_spam <- read.csv("../input/majvote/tweet_spam.csv", stringsAsFactors = F)
tweet_spam <- tweet_spam[order(tweet_spam$Unit.Id), ]
uid <- 0
mv_rels <- ""
for (idx in 1:length(tweet_majvote)) {
if (tweet_majvote$Unit.Id[idx] != uid) {
jdx <- idx - 1
while (jdx > 0 && tweet_majvote$Unit.Id[jdx] == uid) {
tweet_majvote$MV.Event[jdx] <- mv_rels
jdx <- jdx - 1
}
uid <- tweet_majvote$Unit.Id[idx]
mv_rels <- tweet_majvote$MV.Event[idx]
} else {
mv_rels <- paste(mv_rels, tweet_majvote$MV.Event[idx], sep = "\n")
}
}
tweet_majvote <- tweet_majvote[!duplicated(tweet_majvote$Unit.Id), ]
tweet_majvote <- tweet_majvote[order(tweet_majvote$Unit.Id), ]
tweet_single <- tweet_single[order(tweet_single$Unit.Id), ]
tweet_data <- data.frame(
unit_id = tweet_single$Unit.Id,
seed = tweet_single$Tweet.Seed.Index,
author = tweet_single$Tweet.Author,
content = tweet_single$Tweet.Content,
date = tweet_single$Tweet.Date,
ground_truth = "",
single = tweet_single$Single.Event,
majvote = tweet_majvote$MV.Event,
CT_Islands_disputed_between_China_and_Japan = tweet_single$Islands_disputed_between_China_and_Japan,
CT_Korean_MV_Sewol_ferry_sinking = tweet_single$Korean_MV_Sewol_ferry_sinking,
CT_Japan_whaling_and_dolphin_hunting = tweet_single$Japan_whaling_and_dolphin_hunting,
CT_Davos_world_economic_forum_2014 = tweet_single$Davos_world_economic_forum_2014,
CT_Disappearance_of_Malaysia_Airlines_Flight_370 = tweet_single$Disappearance_of_Malaysia_Airlines_Flight_370,
CT_anti_China_protests_in_Vietnam = tweet_single$anti_China_protests_in_Vietnam,
CT_Ukraine_crisis_2014 = tweet_single$Ukraine_crisis_2014,
CT_FIFA_worldcup_2014 = tweet_single$FIFA_worldcup_2014,
CT_NONE = tweet_single$NONE,
stringsAsFactors = F
)
tweet_data$majvote <- gsub("\n", ",", tweet_data$majvote)
tweet_data$single <- gsub("\n", ",", tweet_data$single)
for (idx in 1:length(tweet_data[, 1])) {
sample <- tweet_ground_truth[tweet_ground_truth$Unit.Id %in% c(tweet_data$unit_id[idx]), ]
if (length(sample[, 1]) > 0) {
tweet_data$ground_truth[idx] <- paste(sample$Event, collapse = ",")
}
else {
tweet_data$ground_truth[idx] <- "NONE"
}
}
# save(tweet_data, file = "tweet_data.Rdata")
#### tweets metrics ####
# source("tweet_data.Rdata")
mv_all <- data.frame(stringsAsFactors = F)
sg_all <- data.frame(stringsAsFactors = F)
ct_all <- data.frame(stringsAsFactors = F)
sp_all <- data.frame(stringsAsFactors = F)
mv_cont <- c()
ct_cont <- c()
gt_cont <- c()
sp_cont <- c()
for (idx in 1:length(events)) {
mv <- get_metrics(grepl(events[idx], tweet_data$majvote) * 2 - 1,
grepl(events[idx], tweet_data$ground_truth) * 2 - 1)
sg <- get_metrics(grepl(events[idx], tweet_data$single) * 2 - 1,
grepl(events[idx], tweet_data$ground_truth) * 2 - 1)
mv_cont <- append(mv_cont, grepl(events[idx], tweet_data$majvote) * 2 - 1)
gt_cont <- append(gt_cont, grepl(events[idx], tweet_data$ground_truth) * 2 - 1)
ct <- data.frame(stringsAsFactors = F)
sp <- data.frame(stringsAsFactors = F)
for (r in 1:9) {
ratio <- r / 10
ctr <- get_metrics((tweet_data[, paste("CT", events[idx], sep = "_")] >= ratio) * 2 - 1,
grepl(events[idx], tweet_data$ground_truth) * 2 - 1)
ct <- rbind(ct, ctr)
spr <- get_metrics((tweet_spam[, events[idx]] >= ratio) * 2 - 1,
grepl(events[idx], tweet_data$ground_truth) * 2 - 1)
sp <- rbind(sp, spr)
if (r == 4) {
ct_cont <- append(ct_cont, (tweet_data[, paste("CT", events[idx], sep = "_")] >= ratio) * 2 - 1)
sp_cont <- append(sp_cont, (tweet_spam[, events[idx]] >= ratio) * 2 - 1)
}
}
ymin <- min(floor(c(mv$f1, sg$f1, ct$f1) * 10) / 10)
ymax <- max(ceiling(c(mv$f1, sg$f1, ct$f1) * 10) / 10)
plot((1:9)/10, ct$f1, xlab = "sent-event score neg/pos thresh", ylab = "F1",
type = 'o', main = events[idx], ylim = c(ymin, ymax), col = "darkblue", lwd = 2)
lines((1:9)/10, rep(mv$f1[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg$f1[1], 9), lty = 3, col = "darkred", lwd = 2)
legend("bottomleft", c("crowd", "majvote", "single"), lty = c(1,2,3), lwd = 2, col = c("darkblue", "darkgreen", "darkred"))
if (idx == 1) {
mv_all <- mv
sg_all <- sg
ct_all <- ct
sp_all <- sp
print(events[idx])
} else if (idx < length(events)) {
mv_all <- mv_all + mv
sg_all <- sg_all + sg
ct_all <- ct_all + ct
sp_all <- sp_all + sp
}
}
mv_all <- recompute_metrics(mv_all)
sg_all <- recompute_metrics(sg_all)
ct_all <- recompute_metrics(ct_all)
sp_all <- recompute_metrics(sp_all)
sp_all
plot((1:9)/10, ct_all$f1, xlab = "unit-annotation score neg/pos threshold", ylab = "F1 score", type = 'o',
main = "Twitter Event Extraction",
cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.5, ylim = c(0.7, 0.92),
col = "darkblue", lwd = 2)
grid (NULL,NULL, lty = 6, col = "cornsilk3")
lines((1:9)/10, rep(mv_all$f1[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$f1[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$f1, lty = 5, col = "purple", lwd = 2)
legend("bottomleft", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
sp_all
plot((1:9)/10, ct_all$p, xlab = "sent-event score neg/pos thresh", ylab = "precision",
type = 'o', main = "tweets eval precision", col = "darkblue", lwd = 2)
lines((1:9)/10, rep(mv_all$p[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$p[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$p, lty = 5, col = "purple", lwd = 2)
legend("bottomleft", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
plot((1:9)/10, ct_all$p, xlab = "sent-event score neg/pos thresh", ylab = "precision",
type = 'o', main = "tweets eval precision", col = "darkblue", lwd = 2)
lines((1:9)/10, rep(mv_all$p[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$p[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$p, lty = 5, col = "purple", lwd = 2)
legend("bottomright", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
plot((1:9)/10, ct_all$p, xlab = "sent-event score neg/pos thresh", ylab = "precision",
type = 'o', main = "tweets eval precision", col = "darkblue", lwd = 2, ylim = c(0.73, 1))
lines((1:9)/10, rep(mv_all$p[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$p[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$p, lty = 5, col = "purple", lwd = 2)
legend("bottomright", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
plot((1:9)/10, ct_all$r, xlab = "sent-event score neg/pos thresh", ylab = "recall",
type = 'o', main = "tweets eval recall", col = "darkblue", lwd = 2)
lines((1:9)/10, rep(mv_all$r[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$r[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$r, lty = 5, col = "purple", lwd = 2)
legend("bottomright", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
plot((1:9)/10, ct_all$r, xlab = "sent-event score neg/pos thresh", ylab = "recall",
type = 'o', main = "tweets eval recall", col = "darkblue", lwd = 2)
lines((1:9)/10, rep(mv_all$r[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$r[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$r, lty = 5, col = "purple", lwd = 2)
legend("bottomleft", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
plot((1:9)/10, ct_all$r, xlab = "sent-event score neg/pos thresh", ylab = "recall",
type = 'o', main = "tweets eval recall", col = "darkblue", lwd = 2, ylim = c(0.71, 0.91))
lines((1:9)/10, rep(mv_all$r[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$r[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$r, lty = 5, col = "purple", lwd = 2)
legend("bottomleft", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
plot((1:9)/10, ct_all$acc, xlab = "sent-event score neg/pos thresh", ylab = "accuracy",
type = 'o', main = "tweets eval accuracy", col = "darkblue", lwd = 2, ylim=c(0.94, 0.98))
lines((1:9)/10, rep(mv_all$acc[1], 9), lty = 2, col = "darkgreen", lwd = 2)
lines((1:9)/10, rep(sg_all$acc[1], 9), lty = 3, col = "darkred", lwd = 2)
lines((1:9)/10, sp_all$acc, lty = 5, col = "purple", lwd = 2)
legend("bottomright", c("CrowdTruth", "CrowdTruth with spam", "Majority vote", "Single annotator"), lty = c(1,5,2,3), lwd = 2,
col = c("darkblue", "purple", "darkgreen", "darkred"), cex = 1.3)
precision <- function(tp, fp, tn, fn) {
return(tp / (tp + fp))
}
recall <- function(tp, fp, tn, fn) {
return(tp / (tp + fn))
}
f1score <- function(tp, fp, tn, fn) {
return(2 * tp / (2 * tp + fp + fn))
}
accuracy <- function(tp, fp, tn, fn) {
return((tp + tn) / (tp + fp + tn + fn))
}
get_metrics <- function(data, gold) {
tp <- 0
tn <- 0
fp <- 0
fn <- 0
for (idx in 1:length(data)) {
if (data[idx] == 1  && gold[idx] == 1 ) tp <- tp + 1
if (data[idx] == 1  && gold[idx] == -1) fp <- fp + 1
if (data[idx] == -1 && gold[idx] == 1 ) fn <- fn + 1
if (data[idx] == -1 && gold[idx] == -1) tn <- tn + 1
}
p <- precision(tp, fp, tn, fn)
r <- recall(tp, fp, tn, fn)
f1 <- f1score(tp, fp, tn, fn)
acc <- accuracy(tp, fp, tn, fn)
metrics <- data.frame(
tp = tp,
tn = tn,
fp = fp,
fn = fn,
p = p,
r = r,
f1 = f1,
acc = acc,
stringsAsFactors = F
)
return(metrics)
}
recompute_metrics <- function(data) {
data$p   <- precision(data$tp, data$fp, data$tn, data$fn)
data$r   <- recall(data$tp, data$fp, data$tn, data$fn)
data$f1  <- f1score(data$tp, data$fp, data$tn, data$fn)
data$acc <- accuracy(data$tp, data$fp, data$tn, data$fn)
return(data)
}
contingency_table <- function(data1, data2, gold) {
ct <- rep(0, 4)
for (idx in 1:length(data1)) {
if      (data1[idx] == gold[idx]  && data2[idx] == gold[idx]) ct[1] <- ct[1] + 1
else if (data1[idx] == gold[idx] && data2[idx] != gold[idx]) ct[2] <- ct[2] + 1
else if (data1[idx] != gold[idx] && data2[idx] == gold[idx]) ct[3] <- ct[3] + 1
else ct[4] <- ct[4] + 1
}
return(matrix(ct, nrow = 2))
}
sound <- read.csv("../input/majvote/sounds.csv", stringsAsFactors = F)
sound_ground_truth <- read.csv("../input/majvote/sounds_ground_truth.csv", stringsAsFactors = F)
sound_ground_truth <- sound_ground_truth[!is.na(sound_ground_truth$ben), ]
sound$sentence_relation_score <- as.numeric(sound$sentence_relation_score)
sound$expert <- as.numeric(sound$expert)
sound$single <- as.numeric(sound$single)
sound$majvote <- as.numeric(sound$majvote)
sound <- sound[order(sound$Sent_id), ]
sound_ground_truth <- sound_ground_truth[order(sound_ground_truth$Sent_id), ]
sound_spam <- read.csv("sounds-all-annotated.csv", stringsAsFactors = F)
sound_spam <- sound_spam[!is.na(sound_spam$ben), ]
View(sound_spam)
setwd("~/Documents/Open-Domain-Relation-Extraction/scripts")
input_folder <- "/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/output/"
input_file <- list.files(input_folder, pattern = "f[0-9]*.csv")
# input_file <- "baseline3.csv"
output_sent_pos <- paste(input_folder, "sent-vec_ambig.csv", sep = "")
output_sent_neg <- paste(input_folder, "sent-vec_unambig.csv", sep = "")
output_work <- paste(input_folder, "work-vec.csv", sep = "")
crowd_data <- data.frame(stringsAsFactors = F)
for (i in 1:length(input_file)) {
cd <- read.csv(paste(input_folder, input_file[i], sep = ""), header = T, sep = ",",
dec = ".", fill = TRUE, stringsAsFactors=FALSE)
crowd_data <- rbind(crowd_data, cd)
}
View(crowd_data)
input_file
input_folder <- "/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/output/"
input_file <- list.files(input_folder, pattern = "f[0-9]*.csv")
# input_file <- "baseline3.csv"
output_sent_pos <- paste(input_folder, "sent-vec_ambig.csv", sep = "")
output_sent_neg <- paste(input_folder, "sent-vec_unambig.csv", sep = "")
output_work <- paste(input_folder, "work-vec.csv", sep = "")
crowd_data <- data.frame(stringsAsFactors = F)
for (i in 1:length(input_file)) {
cd <- read.csv(paste(input_folder, input_file[i], sep = ""), header = T, sep = ",",
dec = ".", fill = TRUE, stringsAsFactors=FALSE)
print(paste(input_folder, input_file[i], sep = ""))
crowd_data <- rbind(crowd_data, cd)
}
baseline_data <- read.csv("/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/crowd_input_ambig.csv",
stringsAsFactors = F)
baseline_data <- rbind(baseline_data,
read.csv("/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/crowd_input_unambig.csv",
stringsAsFactors = F))
View(baseline_data)
baseline_data[1,]
baseline_data[,1]
baseline_data[,2:length(baseline_data[1, ])]
baseline_data <- baseline_data[,2:length(baseline_data[1, ])]
View(baseline_data)
baseline_data <- baseline_data[baseline_data$Sent_id %in% crowd_data$sent_id, ]
input_folder <- "/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/output/"
input_file <- list.files(input_folder, pattern = "f[0-9]*.csv")
output_sent_pos <- paste(input_folder, "sent-vec_ambig.csv", sep = "")
output_sent_neg <- paste(input_folder, "sent-vec_unambig.csv", sep = "")
output_work <- paste(input_folder, "work-vec.csv", sep = "")
crowd_data <- data.frame(stringsAsFactors = F)
for (i in 1:length(input_file)) {
cd <- read.csv(paste(input_folder, input_file[i], sep = ""), header = T, sep = ",",
dec = ".", fill = TRUE, stringsAsFactors=FALSE)
print(paste(input_folder, input_file[i], sep = ""))
crowd_data <- rbind(crowd_data, cd)
}
View(cd)
View(crowd_data)
colnames(cd)
colnames(crowd_data)
setdiff(colnames(cd), colnames(crowd_data))
cd[1, ]
cd[, 1]
crowd_data <- data.frame(stringsAsFactors = F)
length(crowd_data)
input_folder <- "/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/output/"
input_file <- list.files(input_folder, pattern = "f[0-9]*.csv")
output_sent_pos <- paste(input_folder, "sent-vec_ambig.csv", sep = "")
output_sent_neg <- paste(input_folder, "sent-vec_unambig.csv", sep = "")
output_work <- paste(input_folder, "work-vec.csv", sep = "")
crowd_data <- data.frame(stringsAsFactors = F)
for (i in 1:length(input_file)) {
cd <- read.csv(paste(input_folder, input_file[i], sep = ""), header = T, sep = ",",
dec = ".", fill = TRUE, stringsAsFactors=FALSE)
if (i > 1) {
cd <- cd[, colnames(crowd_data)]
}
print(paste(input_folder, input_file[i], sep = ""))
crowd_data <- rbind(crowd_data, cd)
}
baseline_data <- read.csv("/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/crowd_input_ambig.csv",
stringsAsFactors = F)
baseline_data <- rbind(baseline_data,
read.csv("/home/anca/Documents/Open-Domain-Relation-Extraction/data/unannotated/crowd_input_unambig.csv",
stringsAsFactors = F))
baseline_data <- baseline_data[,2:length(baseline_data[1, ])]
baseline_data <- baseline_data[baseline_data$Sent_id %in% crowd_data$sent_id, ]
View(crowd_data)
7500/500
sent_vec <- ratio_sentence_measures(crowd_data, baseline_data, relations)
require(lsa)
source("read_data.R")
source("sentence_measures.R")
source("sentence_measures_v2.R")
source("worker_measures.R")
source("relation_measures.R")
sent_vec <- ratio_sentence_measures(crowd_data, baseline_data, relations)
View(sent_vec)
work_vec <- worker_measures(crowd_data, sent_vec, relations)
install.packages("lsa")
install.packages("SnowballC")
install.packages("SnowballC")
